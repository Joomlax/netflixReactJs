[{"/home/dgulyasar/Desktop/ReactJs/netflixReactJs/netflix/src/index.js":"1","/home/dgulyasar/Desktop/ReactJs/netflixReactJs/netflix/src/App.js":"2","/home/dgulyasar/Desktop/ReactJs/netflixReactJs/netflix/src/Row.js":"3","/home/dgulyasar/Desktop/ReactJs/netflixReactJs/netflix/src/requests.js":"4","/home/dgulyasar/Desktop/ReactJs/netflixReactJs/netflix/src/axios.js":"5","/home/dgulyasar/Desktop/ReactJs/netflixReactJs/netflix/src/Banner.js":"6","/home/dgulyasar/Desktop/ReactJs/netflixReactJs/netflix/src/Nav.js":"7"},{"size":201,"mtime":1611868003989,"results":"8","hashOfConfig":"9"},{"size":1018,"mtime":1612205286784,"results":"10","hashOfConfig":"9"},{"size":1118,"mtime":1612202692313,"results":"11","hashOfConfig":"9"},{"size":686,"mtime":1611869116698,"results":"12","hashOfConfig":"9"},{"size":162,"mtime":1611869244108,"results":"13","hashOfConfig":"9"},{"size":1423,"mtime":1612204989050,"results":"14","hashOfConfig":"9"},{"size":819,"mtime":1612264290682,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"svndz0",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/dgulyasar/Desktop/ReactJs/netflixReactJs/netflix/src/index.js",[],["32","33"],"/home/dgulyasar/Desktop/ReactJs/netflixReactJs/netflix/src/App.js",[],"/home/dgulyasar/Desktop/ReactJs/netflixReactJs/netflix/src/Row.js",["34"],"import React, { useState, useEffect } from \"react\";\nimport axios from \"./axios\";\nimport requests from \"./requests\";\nimport \"./Row.css\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nfunction Row({ title, fetchUrl, isLargeRow }) {\n  //Deconstructing with {...}\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      //console.log(request.data.results)\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl]);\n\n  //console.log(movies);\n  return (\n    <div className=\"row\">\n      <h2> {title} </h2>\n      <div className=\"row_posters\">\n        {/* row_poster */}\n        {movies.map((movie) => (\n          <img\n            key={movie.id}\n            className={`row_poster ${isLargeRow && \"row_posterLarge\"}`}\n            src={`${base_url}${\n              isLargeRow ? movie.poster_path : movie.backdrop_path\n            }`}\n            alt={movie.name}\n          />\n        ))}\n      </div>\n      {/* container -> posters */}\n    </div>\n  );\n}\n\nexport default Row;\n","/home/dgulyasar/Desktop/ReactJs/netflixReactJs/netflix/src/requests.js",[],"/home/dgulyasar/Desktop/ReactJs/netflixReactJs/netflix/src/axios.js",[],"/home/dgulyasar/Desktop/ReactJs/netflixReactJs/netflix/src/Banner.js",[],"/home/dgulyasar/Desktop/ReactJs/netflixReactJs/netflix/src/Nav.js",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":3,"column":8,"nodeType":"41","messageId":"42","endLine":3,"endColumn":16},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"no-unused-vars","'requests' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]